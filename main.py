import logging
import shutil

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import json
import os
from dotenv import load_dotenv
from openai import OpenAI
from datetime import datetime, date

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load environment variables from .env file
load_dotenv()

# Get tokens from environment
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")

# Conversation state constants
SCAN, VOICE, FOCUS, PROMISE = range(4)

# File paths
DATA_FILE = 'reflections.json'
PROMPT_FILE = 'consultant_prompt.txt'

# OpenAI client setup
client = OpenAI(api_key=OPENAI_KEY)

# Load existing reflection data
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        backup_path = DATA_FILE + ".bak"
        shutil.copy(DATA_FILE, backup_path)
        logger.warning(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {backup_path}")
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump({}, f)
        return {}

# Save a new reflection entry
def save_data(user_id, entry):
    data = load_data()
    user_data = data.get(str(user_id), [])
    user_data.append(entry)
    data[str(user_id)] = user_data
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ JSON: {e}")

# Daily reminder logic
def get_users_to_remind():
    data = load_data()
    today = date.today().isoformat()
    users_to_remind = []
    for user_id, entries in data.items():
        if not any(entry['date'].startswith(today) for entry in entries):
            users_to_remind.append(user_id)
    return users_to_remind

async def send_reminders(app):
    users = get_users_to_remind()
    for user_id in users:
        try:
            await app.bot.send_message(
                chat_id=user_id,
                text="üåô –ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å? –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∏—Ç—É–∞–ª?"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_id}: {e}")

# Scheduler setup
def schedule_daily_reminder(app):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(lambda: send_reminders(app), CronTrigger(hour=20, minute=0))
    scheduler.start()


# Load AI consultant prompt from file
def load_prompt():
    if os.path.exists(PROMPT_FILE):
        with open(PROMPT_FILE, 'r', encoding='utf-8') as f:
            return f.read()
    return "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —Ç—ë–ø–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –º—è–≥–∫–æ—Å—Ç—å—é –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º."

# Utility function to truncate overly long text
def truncate(text, limit=200):
    return text if len(text) <= limit else text[:limit] + "..."

# Create main keyboard
MAIN_KEYBOARD = ReplyKeyboardMarkup([
    ["üåø –ù–∞—á–∞—Ç—å —Ä–∏—Ç—É–∞–ª", "ü´Ç –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å AI"],
    ["üìú –ò—Å—Ç–æ—Ä–∏—è", "‚ùå –û—Ç–º–µ–Ω–∞"]
], resize_keyboard=True)

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üåø\n–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —É—Å–ª—ã—à–∞—Ç—å —Å–µ–±—è.\n\n–ù–∞–∂–º–∏ üåø ‚Äî —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∏—Ç—É–∞–ª\n–ò–ª–∏ ü´Ç ‚Äî —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å",
        reply_markup=MAIN_KEYBOARD
    )

# Cancel the ritual
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∏—Ç—É–∞–ª –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –Ω—É–∂–¥—É ‚ú®", reply_markup=MAIN_KEYBOARD)
    return ConversationHandler.END

# Start the ritual
async def ritual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üåø –®–∞–≥ 1: –ß—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è —Ç–µ–ª–æ? –ü–∏—à–∏ —Å–≤–æ–±–æ–¥–Ω–æ.")
    return SCAN

# Save body scan
async def scan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['entry'] = {
        'date': datetime.now().isoformat(),
        'scan': update.message.text
    }
    keyboard = ReplyKeyboardMarkup([
        ["–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å", "–°–µ—Ä–¥—Ü–µ", "–í–¥–æ—Ö–Ω–æ–≤–∏—Ç–µ–ª—å"],
        ["–ü—É—Ç–Ω–∏–∫", "–ò—Å–∫–∞—Ç–µ–ª—å", "–ë–µ—Ä–µ–≥—É—â–∏–π –æ—Ç–Ω–æ—à–µ–Ω–∏—è"],
        ["–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä–∏—Ç–∏–∫", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–µ–±—ë–Ω–æ–∫"]
    ], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üó∫Ô∏è –®–∞–≥ 2: –ö–∞–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ? (–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", reply_markup=keyboard)
    return VOICE

# Save voices
async def voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['entry']['voices'] = update.message.text
    keyboard = ReplyKeyboardMarkup([
        ["–ó–∞–±–æ—Ç–∞ –æ —Ç–µ–ª–µ", "–†–∞–±–æ—Ç–∞ –∏ —Ü–µ–ª–∏"],
        ["–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–¢–µ–ø–ª–æ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"],
        ["–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –≤—ã–¥–æ—Ö"]
    ], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("üéØ –®–∞–≥ 3: –ö–∞–∫–æ–π —Ñ–æ–∫—É—Å –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é? (–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π)", reply_markup=keyboard)
    return FOCUS

# Save focus
async def focus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['entry']['focus'] = update.message.text
    await update.message.reply_text("ü§≤ –®–∞–≥ 4: –ö–∞–∫–æ–µ –æ–±–µ—â–∞–Ω–∏–µ —Ö–æ—á–µ—à—å –¥–∞—Ç—å —Å–µ–±–µ –Ω–∞ –Ω–µ–¥–µ–ª—é?", reply_markup=ReplyKeyboardRemove())
    return PROMISE

# Save promise and end ritual
async def promise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['entry']['promise'] = update.message.text
    user_id = update.message.from_user.id
    save_data(user_id, context.user_data['entry'])
    await update.message.reply_text("‚ú® –†–∏—Ç—É–∞–ª –∑–∞–≤–µ—Ä—à—ë–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Å–µ–±–µ ‚ú®", reply_markup=MAIN_KEYBOARD)
    return ConversationHandler.END

# Start AI talk
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü´Ç –Ø —Ä—è–¥–æ–º. –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω–∞ –¥—É—à–µ.")

# AI reply
async def ai_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    prompt = load_prompt()
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": user_input}
            ],
            max_tokens=300,
            temperature=0.7
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        logger.error("OpenAI AI-talk error:", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# Summarize user‚Äôs reflection history
async def history_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()
    entries = data.get(user_id, [])[-3:]
    if not entries:
        await update.message.reply_text("‚ú® –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞) –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±–æ–π ‚ú®")
        return
    history_text = "\n\n".join(
        [
            f"–î–∞—Ç–∞: {entry['date']}\n–ß—É–≤—Å—Ç–≤–∞: {truncate(entry.get('scan', '-'))}\n–ì–æ–ª–æ—Å–∞: {entry.get('voices', '-')}\n–§–æ–∫—É—Å: {entry.get('focus', '-')}\n–û–±–µ—â–∞–Ω–∏–µ: {entry.get('promise', '-')}"
            for entry in entries
        ]
    )
    summary_prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –û—Ç–≤–µ—Ç—å —Ç–µ–ø–ª–æ, —Å –∑–∞–±–æ—Ç–æ–π –∏ —É—á–∞—Å—Ç–∏–µ–º, –±—É–¥—Ç–æ –ø–∏—à–µ—à—å –±–ª–∏–∑–∫–æ–º—É –¥—Ä—É–≥—É.\n"
        "- –ö–∞–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç?\n- –ö–∞–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ–º—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è?\n- –ß—Ç–æ —Ç—ã –±—ã –º—è–≥–∫–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?\n"
        f"\n–ò—Å—Ç–æ—Ä–∏—è:\n{history_text}"
    )
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'."},
                {"role": "user", "content": summary_prompt}
            ],
            max_tokens=700,
            temperature=0.6
        )
        reply = response.choices[0].message.content
        lower_reply = reply.lower()
        if any(word in lower_reply for word in ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–ø–æ–∫–æ–π", "—É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç—å"]):
            emoji = "üåø"
        elif any(word in lower_reply for word in ["–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "—Ä–æ—Å—Ç", "—ç–Ω–µ—Ä–≥–∏—è"]):
            emoji = "üåû"
        elif any(word in lower_reply for word in ["—Ç—Ä–µ–≤–æ–≥–∞", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ"]):
            emoji = "üåßÔ∏è"
        elif any(word in lower_reply for word in ["–ø–µ—á–∞–ª—å", "—É—Å—Ç–∞–ª–æ—Å—Ç—å", "–≥—Ä—É—Å—Ç—å"]):
            emoji = "üåô"
        else:
            emoji = "ü™û"
        await update.message.reply_text(f"{emoji} –í–æ—Ç —á—Ç–æ —è –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞, —á–∏—Ç–∞—è —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏:\n\n{reply}", reply_markup=MAIN_KEYBOARD)
    except Exception as e:
        logger.error("OpenAI summary error:", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# Start the bot and add handlers
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("ritual", ritual), MessageHandler(filters.Regex("^üåø –ù–∞—á–∞—Ç—å —Ä–∏—Ç—É–∞–ª$"), ritual)],
        states={
            SCAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, scan)],
            VOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, voice)],
            FOCUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, focus)],
            PROMISE: [MessageHandler(filters.TEXT & ~filters.COMMAND, promise)],
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)]
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("talk", talk))
    app.add_handler(MessageHandler(filters.Regex("^ü´Ç –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å AI$"), talk))
    app.add_handler(MessageHandler(filters.Regex("^üìú –ò—Å—Ç–æ—Ä–∏—è$"), history_summary))
    app.add_handler(CommandHandler("history", history_summary))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_response))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
