from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import json
import os
from dotenv import load_dotenv
from openai import OpenAI

# Load environment variables from .env file
load_dotenv()

# Get tokens from environment
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")

# Conversation state constants
SCAN, VOICE, FOCUS, PROMISE = range(4)

# File paths
DATA_FILE = 'reflections.json'
PROMPT_FILE = 'consultant_prompt.txt'

# OpenAI client setup
client = OpenAI(api_key=OPENAI_KEY)

# Load existing reflection data
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    return {}

# Save a new reflection entry
def save_data(user_id, entry):
    data = load_data()
    user_data = data.get(str(user_id), [])
    user_data.append(entry)
    data[str(user_id)] = user_data
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# Load AI consultant prompt from file
def load_prompt():
    if os.path.exists(PROMPT_FILE):
        with open(PROMPT_FILE, 'r', encoding='utf-8') as f:
            return f.read()
    return "–¢—ã –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ —Ç—ë–ø–ª—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –º—è–≥–∫–æ—Å—Ç—å—é –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º."

# Utility function to truncate overly long text
def truncate(text, limit=200):
    return text if len(text) <= limit else text[:limit] + "..."

# Summarize user‚Äôs reflection history
async def history_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    data = load_data()
    entries = data.get(user_id, [])[-3:]

    if not entries:
        await update.message.reply_text("‚ú® –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞) –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–±–æ–π ‚ú®")
        return

    history_text = "\n\n".join(
        [
            f"–î–∞—Ç–∞: {entry['date']}\n–ß—É–≤—Å—Ç–≤–∞: {truncate(entry.get('scan', '-'))}\n–ì–æ–ª–æ—Å–∞: {entry.get('voices', '-')}\n–§–æ–∫—É—Å: {entry.get('focus', '-')}\n–û–±–µ—â–∞–Ω–∏–µ: {entry.get('promise', '-')}"
            for entry in entries
        ]
    )

    summary_prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –û—Ç–≤–µ—Ç—å —Ç–µ–ø–ª–æ, —Å –∑–∞–±–æ—Ç–æ–π –∏ —É—á–∞—Å—Ç–∏–µ–º, –±—É–¥—Ç–æ –ø–∏—à–µ—à—å –±–ª–∏–∑–∫–æ–º—É –¥—Ä—É–≥—É.\n"
        "- –ö–∞–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç?\n- –ö–∞–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ–º—ã –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è?\n- –ß—Ç–æ —Ç—ã –±—ã –º—è–≥–∫–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é?\n"
        f"\n–ò—Å—Ç–æ—Ä–∏—è:\n{history_text}"
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ –ø–æ–Ω–∏–º–∞—é—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'."},
                {"role": "user", "content": summary_prompt}
            ],
            max_tokens=400,
            temperature=0.6
        )
        reply = response.choices[0].message.content

        lower_reply = reply.lower()
        if any(word in lower_reply for word in ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–ø–æ–∫–æ–π", "—É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç—å"]):
            emoji = "üåø"
        elif any(word in lower_reply for word in ["–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "—Ä–æ—Å—Ç", "—ç–Ω–µ—Ä–≥–∏—è"]):
            emoji = "üåû"
        elif any(word in lower_reply for word in ["—Ç—Ä–µ–≤–æ–≥–∞", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ"]):
            emoji = "üåßÔ∏è"
        elif any(word in lower_reply for word in ["–ø–µ—á–∞–ª—å", "—É—Å—Ç–∞–ª–æ—Å—Ç—å", "–≥—Ä—É—Å—Ç—å"]):
            emoji = "üåô"
        else:
            emoji = "ü™û"

        await update.message.reply_text(f"{emoji} –í–æ—Ç —á—Ç–æ —è –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞), —á–∏—Ç–∞—è —Ç–≤–æ–∏ –∑–∞–ø–∏—Å–∏:\n\n{reply}")

    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        print("OpenAI summary error:", e)
